name: Publish release Docker image

on:
  release:
    types:
      - created

env:
  docker_repository: tanyixiu
  image_name: my-metrik

jobs:
  test-build-push-image:
    name: 'Run tests, build artifacts and push image'
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:4.4-bionic
        env:
          TZ: "Asia/Shanghai"
        ports:
          - 27017:27017

    steps:
      - name: Setup timezone
        run: sudo timedatectl set-timezone "Asia/Shanghai"

      - uses: actions/checkout@v2

      - name: Setup Java JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-package: 'jdk'
          java-version: '11'
          check-latest: true

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run backend tests
        uses: ./.github/actions/backend_test
        with:
          working-dir: ./backend

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache Node.js packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run frontend tests
        uses: ./.github/actions/frontend_test
        with:
          working-dir: ./frontend

      - name: Collect artifacts
        run: |
          ARTIFACT_DIR="./ci/artifacts"

          mkdir -p $ARTIFACT_DIR/backend
          mkdir $ARTIFACT_DIR/frontend

          cp -rp ./frontend/dist $ARTIFACT_DIR/frontend/
          cp -p ./backend/build/libs/metrik-backend-*.jar $ARTIFACT_DIR/backend/
          cp -p ./backend/run.sh $ARTIFACT_DIR/backend/

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get date
        run: |
          echo "current_date=$(date +'%Y-%m-%d')" >> "$GITHUB_ENV"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        env:
          image_version: ${{ env.current_date }}-v${{github.run_number}}
        with:
          context: ci
          push: true
          tags: |
            ${{env.docker_repository}}/${{env.image_name}}:${{env.image_version}}
            ${{env.docker_repository}}/${{env.image_name}}:latest

#      - name: Build and push Docker image
#        run: |
#          IMAGE_ID=${{ secrets.AWS_PUBLIC_ECR_ACCOUNT_URL }}/${{ secrets.AWS_PUBLIC_ECR_REPO }}
#
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#
#          docker build . --file Dockerfile --tag $IMAGE_ID:latest --tag $IMAGE_ID:$VERSION --label "runnumber=${GITHUB_RUN_ID}" --label "hash=${GITHUB_SHA}"
#
#          IFS="," read -ra DOCKER_TAGS <<< "latest,$VERSION"
#          for tag in "${DOCKER_TAGS[@]}"; do
#            docker push $IMAGE_ID:$tag
#          done
#        working-directory: ./ci
